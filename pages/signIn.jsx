import Head from 'next/head'
import React, { useState, useCallback } from 'react'
import Image from 'next/image'
import { useRouter } from 'next/router'
import InputField from '../components/UI/inputField/InputField'
import PeaksoftLogo from '../public/adminIcons/signinIcon.png'
import classes from '../styles/signIn.module.css'
import Button from '../components/UI/button/Button'
import eye from '../public/adminIcons/eye.svg'
import isEye from '../public/adminIcons/isEye.svg'
import { handleValidation, localstorage } from '../utils/helpers/helpers'
import { baseFetch } from '../api/baseFetch'
import SpinnerLoading from '../components/UI/loadingSpinner/LoadingSpinner'

const SignIn = () => {
   const [hidePassword, setHidePassword] = useState(false)
   const [isLoading, setIsLoading] = useState(false)
   const [errors, setErrors] = useState({
      email: false,
      password: false,
      responseError: false,
   })

   const router = useRouter()

   const [data, setData] = useState({ email: '', password: '' })

   const getIconClassName = () => {
      if (!errors.password) return `${classes.passwordEye}`
      return `${classes.hidePasswordClassName}`
   }

   const onSubmit = async (e) => {
      e.preventDefault()
      const errors = handleValidation(data)
      if (Object.values(errors).length > 0) return setErrors(errors)

      const responseOptions = {
         method: 'POST',
         body: data,
         path: 'auth/authenticate',
      }
      try {
         setIsLoading(true)
         const response = await baseFetch(responseOptions)
         localstorage.save('token', response)
         setIsLoading(false)
         if (response.jwt) {
            router.push('/banners')
         }
         return response
      } catch (error) {
         setErrors({
            responseError: error.message,
         })
         setIsLoading(false)
         return error
      }
   }

   const handleChangeInput = ({ target: { name, value } }) => {
      setData({ ...data, [name]: value })
   }

   const passwordShowHandler = () => setHidePassword((prevState) => !prevState)

   const getPassworOptions = useCallback(() => {
      if (!hidePassword) {
         return { passwordIcon: isEye, typeofOfInput: 'password' }
      }
      return {
         passwordIcon: eye,
         typeofOfInput: 'text',
      }
   }, [hidePassword])

   const { passwordIcon, typeofOfInput } = getPassworOptions()

   return (
      <div>
         <Head>
            <title>Peaksoft House. Sign In</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <main>
            <div id="modal" />
            <div className={classes.signContainer}>
               <div className={classes.logoContainer}>
                  <Image src={PeaksoftLogo} />
               </div>
               <form className={classes.formControl} onSubmit={onSubmit}>
                  <p className={classes.error}>{errors.responseError}</p>
                  <div className={classes.inputFieldBox}>
                     <SpinnerLoading
                        isLoading={isLoading}
                        width={120}
                        height={120}
                     />
                     <label htmlFor="login" className={classes.signInLabel}>
                        Логин
                     </label>
                     <InputField
                        placeholder="Введите логин"
                        id="login"
                        type="email"
                        name="email"
                        error={errors.email}
                        value={data.email}
                        onChange={handleChangeInput}
                     />
                     <label htmlFor="pass" className={classes.signInLabel}>
                        Пароль
                     </label>
                     <InputField
                        placeholder="Введите пароль"
                        id="pass"
                        name="password"
                        autoComplete="false"
                        error={errors.password}
                        value={data.password}
                        type={typeofOfInput}
                        onChange={handleChangeInput}
                     />
                     <span
                        className={getIconClassName()}
                        onClick={passwordShowHandler}
                     >
                        <Image src={passwordIcon} />
                     </span>
                  </div>
                  <Button submission="войти" type="submit" />
               </form>
            </div>
         </main>
      </div>
   )
}

export default SignIn
